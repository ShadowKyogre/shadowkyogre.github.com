<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>ShadowKyogre's GitHub (eudev)</title><link>/</link><description></description><language>en</language><lastBuildDate>Mon, 22 Sep 2014 17:22:10 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>My Experiences with ninit [Part 1]</title><link>/posts/my-experiences-with-ninit-part-1/</link><dc:creator>ShadowKyogre</dc:creator><description>&lt;div&gt;&lt;p&gt;This post is a collection of notes of the process I went through to take out systemd for ninit. Pardon for the scarcity, but I'll revisit this with better descriptions.&lt;/p&gt;
&lt;h2 id="what-is-ninit"&gt;What IS ninit?&lt;/h2&gt;
&lt;h2 id="preparation"&gt;Preparation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install procps-ng-nosystemd&lt;/li&gt;
&lt;li&gt;Temporary symlink to systemd-udevd&lt;/li&gt;
&lt;li&gt;Install ninit&lt;/li&gt;
&lt;li&gt;Set up service directories. You can find a rough copy (though not perfectly synced) copy of my /etc/ninit dir &lt;a href="/posts/my-experiences-with-ninit-part-1/github.com/shadowkyogre/ninit-boot"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reboot&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="post-install"&gt;Post-install&lt;/h2&gt;
&lt;h3 id="eudev-systemdcompat"&gt;eudev{,-systemdcompat}&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;manually build eudev and eudev-systemdcompat&lt;/li&gt;
&lt;li&gt;Remove the symlink from preparations in systemd&lt;/li&gt;
&lt;li&gt;intall eudev and eudev-systemdcompat&lt;/li&gt;
&lt;li&gt;Reboot to test things&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="nsvc-o-haltreboot-vs-ninit-shutdown-or"&gt;nsvc -o {halt,reboot} vs ninit-shutdown -{o,r}&lt;/h3&gt;
&lt;p&gt;I recommend ninit-shutdown -{o,r} if you don't want to manually handle turning services off before&lt;br&gt;
doing shutdown preparations. ninit-shutdown also assumes quite a few things about how a system should&lt;br&gt;
be cleaned up, so if you want more control, you're going to have to create a service to manually shutdown&lt;br&gt;
the services you want in the correct order before halting.&lt;/p&gt;
&lt;h3 id="optional-pretty-messages-for-every-section-started"&gt;Optional: pretty messages for every section started&lt;/h3&gt;
&lt;h3 id="depends-arent-really-depends-more-like-start-before"&gt;Depends aren't really "depends" - more like "start before"&lt;/h3&gt;
&lt;p&gt;Title says it all. ninit won't actually check if the services that a service depends on have finished executing with success or are running.&lt;br&gt;
Some ways to work around this include:&lt;br&gt;
* Specify the order daemons are started in like /etc/rc.conf, except with /etc/ninit/daemon/depends: Simple enough work around. &lt;br&gt;
Everything's also started in parallel like this.&lt;br&gt;
* Patch ninit to include a separate file for services (opt) that specifies true deps that're only run once OR modifies the depends of certain services&lt;br&gt;
once it's done running: Too complex, but could be done.&lt;br&gt;
* Use setup, rsetup, or sys-rsetup to do the dependency checking for shared dependencies: One of the things that the ninit docs &lt;strong&gt;don't&lt;/strong&gt; tell you &lt;br&gt;
is that using nsvc as a synced or waited service is NOT a good idea (nor as a services that's in depends either). I really wouldn't recommend this because this makes things complex.&lt;/p&gt;
&lt;h2 id="thoughts"&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;ninit's good enough if you've got a static configuration that doesn't have too many depends that can be easily manually managed. It also doesn't seem to&lt;br&gt;
keep track of exit codes for error spotting (since a service could fail, but report back as finished).  For true depends, I'd recommend something else &lt;br&gt;
(at least until I can figure out how to patch the run helper in ninit to work around this). I'm thinking of maybe also trying out busybox init+(monit or perp), &lt;br&gt;
initng, OpenRC, or initscripts-fork. Currently, I'm interested in trying monit (even though this'd probably be a little too big for my own needs) since &lt;br&gt;
it does this dependency checking on its own and provides some additional security features that can be coded (eg: stop running a compromised service). &lt;br&gt;
The only thing that scares me about it is that it prefers pid files instead of being a direct parent of the process (as evidenced by with matching|pidfile when&lt;br&gt;
asking what to check for a pid). I just need to figure out which init system to run it from before I start trying it out.&lt;/p&gt;
&lt;h2 id="resources"&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.linuxfromscratch.org/pipermail/blfs-support/2004-March/049009.html"&gt;http://www.linuxfromscratch.org/pipermail/blfs-support/2004-March/049009.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShadowKyogre/ninit-boot"&gt;https://github.com/ShadowKyogre/ninit-boot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ShadowKyogre/systemd-unit-converter"&gt;https://github.com/ShadowKyogre/systemd-unit-converter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>eudev</category><category>ninit</category><category>systemd</category><guid>/posts/my-experiences-with-ninit-part-1/</guid><pubDate>Thu, 18 Sep 2014 13:13:15 GMT</pubDate></item></channel></rss>